{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\flexiMoney-web-app\\\\src\\\\pages\\\\settings\\\\settingsForm.jsx\";\nimport React, { useState, useEffect, useRef } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faEye, faEyeSlash, faDownload } from '@fortawesome/free-solid-svg-icons';\nimport axios from '../../';\nimport svg from \"../../assets/images/Upload.svg\";\nimport downloadsvg from \"../../assets/images/downloading.svg\";\nimport profileAvatar from \"../../assets/images/avatarImg.svg\";\nconst Settings = () => {\n  const [step, setStep] = useState(1);\n  const [tabIndex, setTabIndex] = useState(1);\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [selectedState, setSelectedState] = useState('');\n  const [selectedFiles, setSelectedFiles] = useState(null);\n  const [selectedDocument, setSelectedDocument] = useState('');\n  const [documentImage, setDocumentImage] = useState(null);\n  const [utilityImage, setUtilityImage] = useState(null);\n  const [selectedImage, setSelectedImage] = useState(null);\n  const fileInputRef = useRef(null);\n  const [uploadProgress, setUploadProgress] = useState(0);\n  const [userProfile, setUserProfile] = useState(null);\n\n  // Fetch user data when the component mounts\n  useEffect(() => {\n    const fetchUserProfile = async () => {\n      try {\n        // Replace 'API_ENDPOINT' with the actual endpoint for fetching user data\n        const response = await axios.get('API_ENDPOINT');\n        setUserProfile(response.data); // Assuming the response is an object with user profile data\n      } catch (error) {\n        console.error('Error fetching user profile:', error);\n      }\n    };\n    fetchUserProfile();\n  }, []);\n  useEffect(() => {\n    if (userProfile) {\n      // Assuming your user profile data structure matches the form state\n      setPassword(userProfile.password || ''); // Replace 'password' with the actual field name\n      setConfirmPassword(userProfile.confirmPassword || ''); // Replace 'confirmPassword' with the actual field name\n      // Populate other form fields similarly\n    }\n  }, [userProfile]);\n  const handleSubmit = async event => {\n    event.preventDefault();\n\n    // Prepare updated user profile data based on the form state\n    const updatedProfileData = {\n      password,\n      confirmPassword\n      // Add other fields as needed\n    };\n\n    try {\n      // Replace 'API_UPDATE_ENDPOINT' with the actual endpoint for updating user data\n      const response = await axios.put('API_UPDATE_ENDPOINT', updatedProfileData);\n      console.log('Profile updated successfully:', response.data);\n      // Optionally, you can update the local state with the latest changes\n      setUserProfile(response.data);\n    } catch (error) {\n      console.error('Error updating user profile:', error);\n    }\n  };\n  useEffect(() => {\n    // Set initial form state based on user profile data\n    if (userProfile) {\n      setPassword(userProfile.password || '');\n      setConfirmPassword(userProfile.confirmPassword || '');\n      // Initialize other form fields similarly\n    }\n  }, [userProfile]);\n  const handleUpload = () => {\n    // Perform upload logic\n    // Set uploadProgress based on the actual progress\n    // This is just a placeholder, replace it with your actual upload logic\n    setUploadProgress(50);\n  };\n  const handleUploadButtonClick = () => {\n    // Trigger click on the hidden file input\n    fileInputRef.current.click();\n  };\n  const handleImageChange = event => {\n    const file = event.target.files[0];\n    setSelectedImage(file);\n\n    // You can perform additional actions with the selected image, such as uploading to a server\n  };\n\n  const linkRef = useRef(null);\n  const handleDocumentChange = event => {\n    setSelectedDocument(event.target.value);\n  };\n  const handleUtilityFileChange = async event => {\n    const selectedFile = event.target.files[0];\n    if (selectedFile) {\n      try {\n        convertUtilityToBase64Utility(selectedFile);\n        console.log('utility image = ', selectedFile);\n      } catch (error) {\n        console.error('Error encoding utility image:', error);\n      }\n    }\n  };\n  const convertUtilityToBase64Utility = file => {\n    if (file) {\n      try {\n        const reader = new FileReader();\n        reader.onloadend = () => {\n          setUtilityImage(reader.result);\n        };\n        reader.readAsDataURL(file);\n      } catch (error) {\n        console.error('Error encoding utility image:', error);\n      }\n    }\n  };\n  const downloadForm = () => {\n    // Replace with the actual URL of the form document to be downloaded\n    const formDocumentURL = '/path-to-your-form-document.pdf';\n    window.open(formDocumentURL);\n  };\n  const handleDownload = () => {\n    // Replace 'your_file_url_here' with the actual URL of the file you want to download\n    const fileUrl = 'your_file_url_here';\n\n    // Create a download link\n    const link = document.createElement('a');\n    link.href = fileUrl;\n    link.download = 'your_file_name_here'; // You can set the desired file name\n    document.body.appendChild(link);\n\n    // Trigger the download\n    link.click();\n\n    // Remove the link from the document\n    document.body.removeChild(link);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"settings-section\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 5\n    }\n  });\n};\nexport default Settings;","map":{"version":3,"names":["React","useState","useEffect","useRef","FontAwesomeIcon","faEye","faEyeSlash","faDownload","axios","svg","downloadsvg","profileAvatar","Settings","step","setStep","tabIndex","setTabIndex","password","setPassword","confirmPassword","setConfirmPassword","showPassword","setShowPassword","showConfirmPassword","setShowConfirmPassword","countries","setCountries","selectedCountry","setSelectedCountry","selectedState","setSelectedState","selectedFiles","setSelectedFiles","selectedDocument","setSelectedDocument","documentImage","setDocumentImage","utilityImage","setUtilityImage","selectedImage","setSelectedImage","fileInputRef","uploadProgress","setUploadProgress","userProfile","setUserProfile","fetchUserProfile","response","get","data","error","console","handleSubmit","event","preventDefault","updatedProfileData","put","log","handleUpload","handleUploadButtonClick","current","click","handleImageChange","file","target","files","linkRef","handleDocumentChange","value","handleUtilityFileChange","selectedFile","convertUtilityToBase64Utility","reader","FileReader","onloadend","result","readAsDataURL","downloadForm","formDocumentURL","window","open","handleDownload","fileUrl","link","document","createElement","href","download","body","appendChild","removeChild","className","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/USER/Documents/flexiMoney-web-app/src/pages/settings/settingsForm.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faEye, faEyeSlash, faDownload } from '@fortawesome/free-solid-svg-icons';\r\nimport axios from '../../';\r\nimport svg from '../../assets/images/Upload.svg';\r\nimport downloadsvg from '../../assets/images/downloading.svg';\r\nimport profileAvatar from '../../assets/images/avatarImg.svg';\r\n\r\nconst Settings = () => {\r\n  const [step, setStep] = useState(1);\r\n  const [tabIndex, setTabIndex] = useState(1);\r\n  const [password, setPassword] = useState('');\r\n  const [confirmPassword, setConfirmPassword] = useState('');\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\r\n  const [countries, setCountries] = useState([]);\r\n  const [selectedCountry, setSelectedCountry] = useState('');\r\n  const [selectedState, setSelectedState] = useState('');\r\n  const [selectedFiles, setSelectedFiles] = useState(null);\r\n  const [selectedDocument, setSelectedDocument] = useState('');\r\n  const [documentImage, setDocumentImage] = useState(null);\r\n  const [utilityImage, setUtilityImage] = useState(null);\r\n  const [selectedImage, setSelectedImage] = useState(null);\r\n  const fileInputRef = useRef(null);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [userProfile, setUserProfile] = useState(null);\r\n\r\n  // Fetch user data when the component mounts\r\n  useEffect(() => {\r\n    const fetchUserProfile = async () => {\r\n      try {\r\n        // Replace 'API_ENDPOINT' with the actual endpoint for fetching user data\r\n        const response = await axios.get('API_ENDPOINT');\r\n        setUserProfile(response.data); // Assuming the response is an object with user profile data\r\n      } catch (error) {\r\n        console.error('Error fetching user profile:', error);\r\n      }\r\n    };\r\n\r\n    fetchUserProfile();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (userProfile) {\r\n      // Assuming your user profile data structure matches the form state\r\n      setPassword(userProfile.password || ''); // Replace 'password' with the actual field name\r\n      setConfirmPassword(userProfile.confirmPassword || ''); // Replace 'confirmPassword' with the actual field name\r\n      // Populate other form fields similarly\r\n    }\r\n  }, [userProfile]);\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    // Prepare updated user profile data based on the form state\r\n    const updatedProfileData = {\r\n      password,\r\n      confirmPassword,\r\n      // Add other fields as needed\r\n    };\r\n\r\n    try {\r\n      // Replace 'API_UPDATE_ENDPOINT' with the actual endpoint for updating user data\r\n      const response = await axios.put('API_UPDATE_ENDPOINT', updatedProfileData);\r\n      console.log('Profile updated successfully:', response.data);\r\n      // Optionally, you can update the local state with the latest changes\r\n      setUserProfile(response.data);\r\n    } catch (error) {\r\n      console.error('Error updating user profile:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Set initial form state based on user profile data\r\n    if (userProfile) {\r\n      setPassword(userProfile.password || '');\r\n      setConfirmPassword(userProfile.confirmPassword || '');\r\n      // Initialize other form fields similarly\r\n    }\r\n  }, [userProfile]);\r\n\r\n  const handleUpload = () => {\r\n    // Perform upload logic\r\n    // Set uploadProgress based on the actual progress\r\n    // This is just a placeholder, replace it with your actual upload logic\r\n    setUploadProgress(50);\r\n  };\r\n\r\n  const handleUploadButtonClick = () => {\r\n    // Trigger click on the hidden file input\r\n    fileInputRef.current.click();\r\n  };\r\n\r\n  const handleImageChange = (event) => {\r\n    const file = event.target.files[0];\r\n    setSelectedImage(file);\r\n\r\n    // You can perform additional actions with the selected image, such as uploading to a server\r\n  };\r\n\r\n  const linkRef = useRef(null);\r\n  const handleDocumentChange = (event) => {\r\n    setSelectedDocument(event.target.value);\r\n  };\r\n\r\n  const handleUtilityFileChange = async (event) => {\r\n    const selectedFile = event.target.files[0];\r\n\r\n    if (selectedFile) {\r\n      try {\r\n        convertUtilityToBase64Utility(selectedFile);\r\n        console.log('utility image = ', selectedFile);\r\n      } catch (error) {\r\n        console.error('Error encoding utility image:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const convertUtilityToBase64Utility = (file) => {\r\n    if (file) {\r\n      try {\r\n        const reader = new FileReader();\r\n        reader.onloadend = () => {\r\n          setUtilityImage(reader.result);\r\n        };\r\n        reader.readAsDataURL(file);\r\n      } catch (error) {\r\n        console.error('Error encoding utility image:', error);\r\n      }\r\n    }\r\n  };\r\n\r\n  const downloadForm = () => {\r\n    // Replace with the actual URL of the form document to be downloaded\r\n    const formDocumentURL = '/path-to-your-form-document.pdf';\r\n    window.open(formDocumentURL);\r\n  };\r\n\r\n  const handleDownload = () => {\r\n    // Replace 'your_file_url_here' with the actual URL of the file you want to download\r\n    const fileUrl = 'your_file_url_here';\r\n\r\n    // Create a download link\r\n    const link = document.createElement('a');\r\n    link.href = fileUrl;\r\n    link.download = 'your_file_name_here'; // You can set the desired file name\r\n    document.body.appendChild(link);\r\n\r\n    // Trigger the download\r\n    link.click();\r\n\r\n    // Remove the link from the document\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <div className=\"settings-section\">\r\n      {/* Your JSX code for the settings section */}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,SAASC,eAAe,QAAQ,gCAAgC;AAChE,SAASC,KAAK,EAAEC,UAAU,EAAEC,UAAU,QAAQ,mCAAmC;AACjF,OAAOC,KAAK,MAAM,QAAQ;AAAC,OAAAC,GAAA;AAAA,OAAAC,WAAA;AAAA,OAAAC,aAAA;AAK3B,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACrB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACgB,QAAQ,EAAEC,WAAW,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACkB,eAAe,EAAEC,kBAAkB,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAACoB,YAAY,EAAEC,eAAe,CAAC,GAAGrB,QAAQ,CAAC,KAAK,CAAC;EACvD,MAAM,CAACsB,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGvB,QAAQ,CAAC,KAAK,CAAC;EACrE,MAAM,CAACwB,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAAC0B,eAAe,EAAEC,kBAAkB,CAAC,GAAG3B,QAAQ,CAAC,EAAE,CAAC;EAC1D,MAAM,CAAC4B,aAAa,EAAEC,gBAAgB,CAAC,GAAG7B,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAAC8B,aAAa,EAAEC,gBAAgB,CAAC,GAAG/B,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACgC,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGjC,QAAQ,CAAC,EAAE,CAAC;EAC5D,MAAM,CAACkC,aAAa,EAAEC,gBAAgB,CAAC,GAAGnC,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACoC,YAAY,EAAEC,eAAe,CAAC,GAAGrC,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACsC,aAAa,EAAEC,gBAAgB,CAAC,GAAGvC,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAMwC,YAAY,GAAGtC,MAAM,CAAC,IAAI,CAAC;EACjC,MAAM,CAACuC,cAAc,EAAEC,iBAAiB,CAAC,GAAG1C,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAAC2C,WAAW,EAAEC,cAAc,CAAC,GAAG5C,QAAQ,CAAC,IAAI,CAAC;;EAEpD;EACAC,SAAS,CAAC,MAAM;IACd,MAAM4C,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,IAAI;QACF;QACA,MAAMC,QAAQ,GAAG,MAAMvC,KAAK,CAACwC,GAAG,CAAC,cAAc,CAAC;QAChDH,cAAc,CAACE,QAAQ,CAACE,IAAI,CAAC,CAAC,CAAC;MACjC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;MACtD;IACF,CAAC;IAEDJ,gBAAgB,CAAC,CAAC;EACpB,CAAC,EAAE,EAAE,CAAC;EAEN5C,SAAS,CAAC,MAAM;IACd,IAAI0C,WAAW,EAAE;MACf;MACA1B,WAAW,CAAC0B,WAAW,CAAC3B,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;MACzCG,kBAAkB,CAACwB,WAAW,CAACzB,eAAe,IAAI,EAAE,CAAC,CAAC,CAAC;MACvD;IACF;EACF,CAAC,EAAE,CAACyB,WAAW,CAAC,CAAC;EAEjB,MAAMQ,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpCA,KAAK,CAACC,cAAc,CAAC,CAAC;;IAEtB;IACA,MAAMC,kBAAkB,GAAG;MACzBtC,QAAQ;MACRE;MACA;IACF,CAAC;;IAED,IAAI;MACF;MACA,MAAM4B,QAAQ,GAAG,MAAMvC,KAAK,CAACgD,GAAG,CAAC,qBAAqB,EAAED,kBAAkB,CAAC;MAC3EJ,OAAO,CAACM,GAAG,CAAC,+BAA+B,EAAEV,QAAQ,CAACE,IAAI,CAAC;MAC3D;MACAJ,cAAc,CAACE,QAAQ,CAACE,IAAI,CAAC;IAC/B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEA,KAAK,CAAC;IACtD;EACF,CAAC;EAEDhD,SAAS,CAAC,MAAM;IACd;IACA,IAAI0C,WAAW,EAAE;MACf1B,WAAW,CAAC0B,WAAW,CAAC3B,QAAQ,IAAI,EAAE,CAAC;MACvCG,kBAAkB,CAACwB,WAAW,CAACzB,eAAe,IAAI,EAAE,CAAC;MACrD;IACF;EACF,CAAC,EAAE,CAACyB,WAAW,CAAC,CAAC;EAEjB,MAAMc,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA;IACA;IACAf,iBAAiB,CAAC,EAAE,CAAC;EACvB,CAAC;EAED,MAAMgB,uBAAuB,GAAGA,CAAA,KAAM;IACpC;IACAlB,YAAY,CAACmB,OAAO,CAACC,KAAK,CAAC,CAAC;EAC9B,CAAC;EAED,MAAMC,iBAAiB,GAAIT,KAAK,IAAK;IACnC,MAAMU,IAAI,GAAGV,KAAK,CAACW,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAClCzB,gBAAgB,CAACuB,IAAI,CAAC;;IAEtB;EACF,CAAC;;EAED,MAAMG,OAAO,GAAG/D,MAAM,CAAC,IAAI,CAAC;EAC5B,MAAMgE,oBAAoB,GAAId,KAAK,IAAK;IACtCnB,mBAAmB,CAACmB,KAAK,CAACW,MAAM,CAACI,KAAK,CAAC;EACzC,CAAC;EAED,MAAMC,uBAAuB,GAAG,MAAOhB,KAAK,IAAK;IAC/C,MAAMiB,YAAY,GAAGjB,KAAK,CAACW,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAE1C,IAAIK,YAAY,EAAE;MAChB,IAAI;QACFC,6BAA6B,CAACD,YAAY,CAAC;QAC3CnB,OAAO,CAACM,GAAG,CAAC,kBAAkB,EAAEa,YAAY,CAAC;MAC/C,CAAC,CAAC,OAAOpB,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF;EACF,CAAC;EAED,MAAMqB,6BAA6B,GAAIR,IAAI,IAAK;IAC9C,IAAIA,IAAI,EAAE;MACR,IAAI;QACF,MAAMS,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;QAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;UACvBpC,eAAe,CAACkC,MAAM,CAACG,MAAM,CAAC;QAChC,CAAC;QACDH,MAAM,CAACI,aAAa,CAACb,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOb,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACvD;IACF;EACF,CAAC;EAED,MAAM2B,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA,MAAMC,eAAe,GAAG,iCAAiC;IACzDC,MAAM,CAACC,IAAI,CAACF,eAAe,CAAC;EAC9B,CAAC;EAED,MAAMG,cAAc,GAAGA,CAAA,KAAM;IAC3B;IACA,MAAMC,OAAO,GAAG,oBAAoB;;IAEpC;IACA,MAAMC,IAAI,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;IACxCF,IAAI,CAACG,IAAI,GAAGJ,OAAO;IACnBC,IAAI,CAACI,QAAQ,GAAG,qBAAqB,CAAC,CAAC;IACvCH,QAAQ,CAACI,IAAI,CAACC,WAAW,CAACN,IAAI,CAAC;;IAE/B;IACAA,IAAI,CAACtB,KAAK,CAAC,CAAC;;IAEZ;IACAuB,QAAQ,CAACI,IAAI,CAACE,WAAW,CAACP,IAAI,CAAC;EACjC,CAAC;EAED,oBACEnF,KAAA,CAAAqF,aAAA;IAAKM,SAAS,EAAC,kBAAkB;IAAAC,MAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,CAE5B,CAAC;AAEV,CAAC;AAED,eAAerF,QAAQ"},"metadata":{},"sourceType":"module"}