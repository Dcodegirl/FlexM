{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\flexiMoney-web-app\\\\src\\\\features\\\\dashboard\\\\ChartChad\\\\index.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport { BarChart, Bar, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport axios from '../../../utils/axiosInstance';\nimport { useSelector } from 'react-redux';\nconst ChartChad = ({\n  period,\n  onLoadingChange\n}) => {\n  const [chartData, setChartData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const agentId = useSelector(state => {\n    var _state$auth$user;\n    return (_state$auth$user = state.auth.user) === null || _state$auth$user === void 0 ? void 0 : _state$auth$user.id;\n  });\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        setLoading(true);\n        const response = await axios.get(`/tranxanalysis?period=${period}&agent_id=${agentId}`);\n        const {\n          status,\n          data\n        } = response.data;\n        if (status === 'Successful') {\n          // Format data based on period\n          const formattedData = period === 'weekly' ? data.days.map((day, index) => ({\n            name: day,\n            pv: data.amount[index]\n          })) : period === 'monthly' ? data.month.map((month, index) => ({\n            name: month,\n            pv: parseFloat(data.amount[index])\n          })) : period === 'yearly' ? data.year.map((year, index) => ({\n            name: String(year),\n            pv: parseFloat(data.amount[index])\n          })) : [];\n          setChartData(formattedData);\n        } else {\n          console.error('Error fetching data:', data.message);\n        }\n      } catch (error) {\n        console.error('Error fetching data:', error.message);\n      } finally {\n        setLoading(false);\n        // Notify the parent component about the loading state change\n        onLoadingChange && onLoadingChange(loading);\n      }\n    };\n    fetchData();\n  }, [period, onLoadingChange]);\n  return /*#__PURE__*/React.createElement(ResponsiveContainer, {\n    width: \"100%\",\n    height: 300,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(BarChart, {\n    width: 500,\n    height: 300,\n    data: chartData,\n    margin: {\n      top: 5,\n      right: 10,\n      left: 10,\n      bottom: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CartesianGrid, {\n    strokeDasharray: \"3 3\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(XAxis, {\n    dataKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(YAxis, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Legend, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Bar, {\n    dataKey: \"pv\",\n    fill: \"#3E215B\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }\n  })));\n};\nexport default ChartChad;","map":{"version":3,"names":["React","useState","useEffect","BarChart","Bar","CartesianGrid","XAxis","YAxis","Tooltip","Legend","ResponsiveContainer","axios","useSelector","ChartChad","period","onLoadingChange","chartData","setChartData","loading","setLoading","agentId","state","_state$auth$user","auth","user","id","fetchData","response","get","status","data","formattedData","days","map","day","index","name","pv","amount","month","parseFloat","year","String","console","error","message","createElement","width","height","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","margin","top","right","left","bottom","strokeDasharray","dataKey","fill"],"sources":["C:/Users/USER/Documents/flexiMoney-web-app/src/features/dashboard/ChartChad/index.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { BarChart, Bar, CartesianGrid, XAxis, YAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport axios from '../../../utils/axiosInstance';\r\nimport { useSelector } from 'react-redux';\r\n\r\nconst ChartChad = ({ period, onLoadingChange }) => {\r\n  const [chartData, setChartData] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const agentId = useSelector((state) => state.auth.user?.id);\r\n\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await axios.get(`/tranxanalysis?period=${period}&agent_id=${agentId}`);\r\n        const { status, data } = response.data;\r\n\r\n        if (status === 'Successful') {\r\n            // Format data based on period\r\n            const formattedData =\r\n              period === 'weekly'\r\n                ? data.days.map((day, index) => ({ name: day, pv: data.amount[index] }))\r\n                : period === 'monthly'\r\n                ? data.month.map((month, index) => ({ name: month, pv: parseFloat(data.amount[index]) }))\r\n                : period === 'yearly'\r\n                ? data.year.map((year, index) => ({ name: String(year), pv: parseFloat(data.amount[index]) }))\r\n                : [];\r\n  \r\n            setChartData(formattedData);\r\n          } else {\r\n            console.error('Error fetching data:', data.message);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error fetching data:', error.message);\r\n        }finally {\r\n            setLoading(false);\r\n            // Notify the parent component about the loading state change\r\n            onLoadingChange && onLoadingChange(loading);\r\n          }\r\n        };\r\n\r\n    fetchData();\r\n  }, [period, onLoadingChange]);\r\n\r\n  return (\r\n    <ResponsiveContainer width=\"100%\" height={300}>\r\n      <BarChart\r\n        width={500}\r\n        height={300}\r\n        data={chartData}\r\n        margin={{\r\n          top: 5,\r\n          right: 10,\r\n          left: 10,\r\n          bottom: 5,\r\n        }}\r\n      >\r\n        <CartesianGrid strokeDasharray=\"3 3\" />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"pv\" fill=\"#3E215B\" />\r\n      </BarChart>\r\n    </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default ChartChad;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}