{"ast":null,"code":"import axios from 'axios';\n\n// Retrieve token from session storage\nconst token = sessionStorage.getItem('token');\n\n// Define base URLs for different environments\nconst baseURLs = {\n  local: 'https://staging-api.flexdeals.com.ng/api',\n  // Replace with your local base URL\n  production: 'https://flexmoney.cico.ng/api' // Replace with your production base URL\n};\n\n// Determine the environment (you can set this dynamically based on your build process or other logic)\nconst environment = process.env.REACT_APP_ENVIRONMENT || 'local';\n\n// Create an Axios instance with the appropriate base URL\nconst axiosInstance = axios.create({\n  baseURL: baseURLs[environment],\n  headers: {\n    'Content-Type': 'application/json'\n    // Add any additional headers if needed\n  }\n});\n\n// Add Authorization header if a token is present\nif (token) {\n  axiosInstance.defaults.headers['Authorization'] = `Token ${token}`;\n}\nexport default axiosInstance;","map":{"version":3,"names":["axios","token","sessionStorage","getItem","baseURLs","local","production","environment","process","env","REACT_APP_ENVIRONMENT","axiosInstance","create","baseURL","headers","defaults"],"sources":["C:/Users/USER/Documents/flexiMoney-web-app/src/utils/axiosInstance.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Retrieve token from session storage\r\nconst token = sessionStorage.getItem('token');\r\n\r\n// Define base URLs for different environments\r\nconst baseURLs = {\r\n  local: 'https://staging-api.flexdeals.com.ng/api', // Replace with your local base URL\r\n  production: 'https://flexmoney.cico.ng/api', // Replace with your production base URL\r\n};\r\n\r\n// Determine the environment (you can set this dynamically based on your build process or other logic)\r\nconst environment = process.env.REACT_APP_ENVIRONMENT || 'local';\r\n\r\n// Create an Axios instance with the appropriate base URL\r\nconst axiosInstance = axios.create({\r\n  baseURL: baseURLs[environment],\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n    // Add any additional headers if needed\r\n  },\r\n});\r\n\r\n// Add Authorization header if a token is present\r\nif (token) {\r\n  axiosInstance.defaults.headers['Authorization'] = `Token ${token}`;\r\n}\r\n\r\nexport default axiosInstance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,KAAK,GAAGC,cAAc,CAACC,OAAO,CAAC,OAAO,CAAC;;AAE7C;AACA,MAAMC,QAAQ,GAAG;EACfC,KAAK,EAAE,0CAA0C;EAAE;EACnDC,UAAU,EAAE,+BAA+B,CAAE;AAC/C,CAAC;;AAED;AACA,MAAMC,WAAW,GAAGC,OAAO,CAACC,GAAG,CAACC,qBAAqB,IAAI,OAAO;;AAEhE;AACA,MAAMC,aAAa,GAAGX,KAAK,CAACY,MAAM,CAAC;EACjCC,OAAO,EAAET,QAAQ,CAACG,WAAW,CAAC;EAC9BO,OAAO,EAAE;IACP,cAAc,EAAE;IAChB;EACF;AACF,CAAC,CAAC;;AAEF;AACA,IAAIb,KAAK,EAAE;EACTU,aAAa,CAACI,QAAQ,CAACD,OAAO,CAAC,eAAe,CAAC,GAAI,SAAQb,KAAM,EAAC;AACpE;AAEA,eAAeU,aAAa"},"metadata":{},"sourceType":"module"}