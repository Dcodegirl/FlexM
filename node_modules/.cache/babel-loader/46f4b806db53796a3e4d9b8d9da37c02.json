{"ast":null,"code":"import axios from \"../../../utils/axiosInstance\";\nexport const TransactionData = async (period, agentId) => {\n  try {\n    const response = await axios.get(`/alltranx`, {\n      params: {\n        'agent_id': agentId,\n        'period': period\n      }\n    });\n    const data = response.data;\n    return data.status === 'Successful' ? data.data : [];\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};\nexport const fetchTransactionsData = async agentId => {\n  try {\n    const response = await axios.get('/aggregtorwallet', {\n      params: {\n        'agent_id': agentId // Include 'agent-id' as a parameter\n      }\n    });\n\n    const data = response.data;\n    const transactionsFromAPI = data.data.transaction.data;\n\n    // Map the API transactions to the format you want\n    const mappedTransactions = transactionsFromAPI.map((apiTransaction, index) => ({\n      id: index + 1,\n      PreviousBalance: apiTransaction.previous_bal,\n      Amount: apiTransaction.amount,\n      Description: apiTransaction.status_description,\n      status: apiTransaction.status_description === 'Transaction successful' ? 'Successful' : apiTransaction.status_description === 'Transaction pending' ? 'Pending' : 'Failed',\n      CurrentBalance: apiTransaction.current_bal,\n      TransactionType: 'Transfer',\n      // You can update this based on your actual data\n      date: apiTransaction.created_at\n    }));\n    return mappedTransactions;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};\nexport const AgentTransactionData = async (agentId, searchValue) => {\n  try {\n    if (!agentId) {\n      console.error('Agent ID is required.');\n      return [];\n    }\n    const response = await axios.get('/searchAgtByAggregator', {\n      params: {\n        agent_id: agentId,\n        business_name: searchValue // Add the business_name parameter\n      }\n    });\n\n    const data = response.data;\n\n    // Map the API response to the desired format\n    const agentTransactionData = data.data.map(agent => ({\n      id: agent.id,\n      agentCode: agent.agent_code,\n      name: `${agent.first_name} ${agent.last_name}`,\n      businessName: agent.business_name || '',\n      phoneNumber: agent.business_phone || '',\n      address: agent.business_address || '',\n      localGovt: agent.lga || '',\n      state: agent.state || ''\n    }));\n    console.log(agentTransactionData);\n    return agentTransactionData;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};\nexport const SingleAgentTransactionData = agentId => {\n  // Fetch or provide your transaction data here\n  const agentTansaction = [{\n    id: 1,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'Deposit',\n    Status: 'Successful',\n    date: '2022-07-09 14:02:24'\n  }, {\n    id: 2,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'DSTV',\n    Status: 'Failed',\n    date: '2022-07-09 14:02:24'\n  }, {\n    id: 3,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'Deposit',\n    Status: 'Successful',\n    date: '2022-07-09 14:02:24'\n  }, {\n    id: 4,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'Deposit',\n    Status: 'Failed',\n    date: '2022-07-09 14:02:24'\n  }, {\n    id: 5,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'Airtime',\n    Status: 'Pending',\n    date: '2022-07-09 14:02:24'\n  }, {\n    id: 6,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'GOTV',\n    Status: 'Successful',\n    date: '2022-07-09 14:02:24'\n  }, {\n    id: 7,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'Airtime',\n    Status: 'Failed',\n    date: '2022-07-09 14:02:24'\n  }, {\n    id: 8,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'Transfer',\n    Status: 'Pending',\n    date: '2022-07-09 14:02:24'\n  }, {\n    id: 9,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'Deposit',\n    Status: 'Pending',\n    date: '2022-07-09 14:02:24'\n  }, {\n    id: 10,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'Transfer',\n    Status: 'Successful',\n    date: '2022-07-09 14:02:24'\n  }, {\n    id: 11,\n    TransactionRef: 'CiCO_KU9HYMS3BFAEZP7',\n    TransactionID: 'A0000000041010',\n    TransactionType: 'Airtime',\n    Status: 'Failed',\n    date: '2022-07-09 14:02:24'\n  }\n  // Add more data as needed\n  ];\n\n  return agentTansaction;\n};\nexport const AgentPerformanceData = async (agentId, businessName) => {\n  try {\n    const params = {\n      agent_id: agentId\n    };\n    if (businessName) {\n      params.business_name = businessName;\n    }\n    const response = await axios.get('/agtAggregatorPerformance', {\n      params: params\n    });\n    const data = response.data;\n\n    // Map the API response to the desired format\n    const agentPerformanceData = data.agent_info.map((info, index) => ({\n      id: index + 1,\n      agentCode: info.agent_code,\n      businessName: info.business_name,\n      cashCount: data.CashCount[index],\n      transferCount: data['Transfer count'][index],\n      totalCount: data.TotalCount[index],\n      cashVolume: parseFloat(data.Cashvolume[index]),\n      transferVolume: parseFloat(data.Transfervolume[index]),\n      totalAmount: parseFloat(data.Totalamount[index])\n    }));\n    return agentPerformanceData;\n  } catch (error) {\n    console.error('Error fetching agent performance data:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","TransactionData","period","agentId","response","get","params","data","status","error","console","fetchTransactionsData","transactionsFromAPI","transaction","mappedTransactions","map","apiTransaction","index","id","PreviousBalance","previous_bal","Amount","amount","Description","status_description","CurrentBalance","current_bal","TransactionType","date","created_at","AgentTransactionData","searchValue","agent_id","business_name","agentTransactionData","agent","agentCode","agent_code","name","first_name","last_name","businessName","phoneNumber","business_phone","address","business_address","localGovt","lga","state","log","SingleAgentTransactionData","agentTansaction","TransactionRef","TransactionID","Status","AgentPerformanceData","agentPerformanceData","agent_info","info","cashCount","CashCount","transferCount","totalCount","TotalCount","cashVolume","parseFloat","Cashvolume","transferVolume","Transfervolume","totalAmount","Totalamount"],"sources":["C:/Users/USER/Documents/flexiMoney-web-app/src/features/dashboard/data/transactionData.jsx"],"sourcesContent":["import axios from \"../../../utils/axiosInstance\";\r\n\r\nexport const TransactionData = async (period, agentId) => {\r\n  try {\r\n    const response = await axios.get(`/alltranx`, {\r\n      params: {\r\n        'agent_id': agentId,\r\n        'period': period\r\n      },\r\n    });\r\n    const data = response.data;\r\n    return data.status === 'Successful' ? data.data : [];\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchTransactionsData = async (agentId) => {\r\n  try {\r\n    const response = await axios.get('/aggregtorwallet', {\r\n      params: {\r\n        'agent_id': agentId, // Include 'agent-id' as a parameter\r\n      },\r\n    });\r\n\r\n    const data = response.data;\r\n    const transactionsFromAPI = data.data.transaction.data;\r\n\r\n    // Map the API transactions to the format you want\r\n    const mappedTransactions = transactionsFromAPI.map((apiTransaction, index) => ({\r\n      id: index + 1,\r\n      PreviousBalance: apiTransaction.previous_bal,\r\n      Amount: apiTransaction.amount,\r\n      Description: apiTransaction.status_description,\r\n      status:\r\n        apiTransaction.status_description === 'Transaction successful'\r\n          ? 'Successful'\r\n          : apiTransaction.status_description === 'Transaction pending'\r\n          ? 'Pending'\r\n          : 'Failed',\r\n      CurrentBalance: apiTransaction.current_bal,\r\n      TransactionType: 'Transfer', // You can update this based on your actual data\r\n      date: apiTransaction.created_at,\r\n    }));\r\n\r\n    return mappedTransactions;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n\r\nexport const AgentTransactionData = async (agentId, searchValue) => {\r\n  try {\r\n    if (!agentId) {\r\n      console.error('Agent ID is required.');\r\n      return [];\r\n    }\r\n\r\n    const response = await axios.get('/searchAgtByAggregator', {\r\n      params: {\r\n        agent_id: agentId,\r\n        business_name: searchValue, // Add the business_name parameter\r\n      },\r\n    });\r\n\r\n    const data = response.data;\r\n\r\n    // Map the API response to the desired format\r\n    const agentTransactionData = data.data.map(agent => ({\r\n      id: agent.id,\r\n      agentCode: agent.agent_code,\r\n      name: `${agent.first_name} ${agent.last_name}`,\r\n      businessName: agent.business_name || '',\r\n      phoneNumber: agent.business_phone || '',\r\n      address: agent.business_address || '',\r\n      localGovt: agent.lga || '',\r\n      state: agent.state || ''\r\n    }));\r\n\r\n    console.log(agentTransactionData);\r\n    return agentTransactionData;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\n\r\n\r\nexport const SingleAgentTransactionData = (agentId) => {\r\n  // Fetch or provide your transaction data here\r\n  const agentTansaction = [\r\n    { id:1 , TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'Deposit', Status: 'Successful', date: '2022-07-09 14:02:24'},\r\n    { id: 2, TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'DSTV', Status: 'Failed', date: '2022-07-09 14:02:24'},\r\n    { id: 3, TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'Deposit', Status: 'Successful', date: '2022-07-09 14:02:24'},\r\n    { id: 4, TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'Deposit', Status: 'Failed', date: '2022-07-09 14:02:24'},\r\n    { id: 5, TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'Airtime', Status: 'Pending', date: '2022-07-09 14:02:24'},\r\n    { id: 6, TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'GOTV', Status: 'Successful', date: '2022-07-09 14:02:24'},\r\n    { id: 7, TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'Airtime', Status: 'Failed', date: '2022-07-09 14:02:24'},\r\n    { id: 8, TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'Transfer', Status: 'Pending', date: '2022-07-09 14:02:24'},\r\n    { id: 9, TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'Deposit', Status: 'Pending', date: '2022-07-09 14:02:24'},\r\n    { id: 10, TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'Transfer', Status: 'Successful', date: '2022-07-09 14:02:24'},\r\n    { id: 11, TransactionRef: 'CiCO_KU9HYMS3BFAEZP7', TransactionID: 'A0000000041010', TransactionType: 'Airtime', Status: 'Failed', date: '2022-07-09 14:02:24'},\r\n    // Add more data as needed\r\n  ];\r\n\r\n  return agentTansaction;\r\n};\r\n\r\n\r\n\r\nexport const AgentPerformanceData = async (agentId, businessName) => {\r\n  try {\r\n    const params = { agent_id: agentId };\r\n    if (businessName) {\r\n      params.business_name = businessName;\r\n    }\r\n\r\n    const response = await axios.get('/agtAggregatorPerformance', {\r\n      params: params,\r\n    });\r\n\r\n    const data = response.data;\r\n\r\n    // Map the API response to the desired format\r\n    const agentPerformanceData = data.agent_info.map((info, index) => ({\r\n      id: index + 1,\r\n      agentCode: info.agent_code,\r\n      businessName: info.business_name,\r\n      cashCount: data.CashCount[index],\r\n      transferCount: data['Transfer count'][index],\r\n      totalCount: data.TotalCount[index],\r\n      cashVolume: parseFloat(data.Cashvolume[index]),\r\n      transferVolume: parseFloat(data.Transfervolume[index]),\r\n      totalAmount: parseFloat(data.Totalamount[index]),\r\n    }));\r\n\r\n    return agentPerformanceData;\r\n  } catch (error) {\r\n    console.error('Error fetching agent performance data:', error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}