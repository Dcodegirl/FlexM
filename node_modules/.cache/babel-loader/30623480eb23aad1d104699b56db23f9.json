{"ast":null,"code":"import axios from \"../../../utils/axiosInstance\";\nexport const TransactionData = async (period, agentId) => {\n  try {\n    const response = await axios.get(`/alltranx`, {\n      params: {\n        'agent_id': agentId,\n        'period': period\n      }\n    });\n    const data = response.data;\n    return data.status === 'Successful' ? data.data : [];\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};\nexport const fetchTransactionsData = async agentId => {\n  try {\n    const response = await axios.get('/aggregtorwallet', {\n      params: {\n        'agent_id': agentId\n      }\n    });\n    const data = response.data;\n    const transactionsFromAPI = data.data.transaction.data;\n\n    // Map the API transactions to the format you want\n    const mappedTransactions = transactionsFromAPI.map((apiTransaction, index) => ({\n      id: index + 1,\n      PreviousBalance: apiTransaction.previous_bal,\n      Amount: apiTransaction.amount,\n      Description: apiTransaction.status_description,\n      status: apiTransaction.status_description === 'Transaction successful' ? 'Successful' : apiTransaction.status_description === 'Transaction pending' ? 'Pending' : 'Failed',\n      CurrentBalance: apiTransaction.current_bal,\n      TransactionType: 'Transfer',\n      // You can update this based on your actual data\n      date: apiTransaction.created_at\n    }));\n    return mappedTransactions;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};\nexport const AgentTransactionData = async (agentId, searchValue) => {\n  try {\n    if (!agentId) {\n      console.error('Agent ID is required.');\n      return [];\n    }\n    const response = await axios.get('/searchAgtByAggregator', {\n      params: {\n        agent_id: agentId,\n        business_name: searchValue // Add the business_name parameter\n      }\n    });\n\n    const data = response.data;\n\n    // Map the API response to the desired format\n    const agentTransactionData = data.data.map(agent => ({\n      id: agent.id,\n      agentCode: agent.agent_code,\n      name: `${agent.first_name} ${agent.last_name}`,\n      businessName: agent.business_name || '',\n      phoneNumber: agent.business_phone || '',\n      address: agent.business_address || '',\n      localGovt: agent.lga || '',\n      state: agent.state || ''\n    }));\n    return agentTransactionData;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};\nexport const SingleAgentTransactionData = async agentId => {\n  try {\n    const response = await axios.get('/aggregtorwallet', {\n      params: {\n        'agent_id': agentId\n      }\n    });\n    const data = response.data;\n    const transactionsFromAPI = data.data.transaction.data;\n\n    // Map the API transactions to the format you want\n    const mappedTransactions = transactionsFromAPI.map((apiTransaction, index) => ({\n      id: index + 1,\n      PreviousBalance: apiTransaction.previous_bal,\n      Amount: apiTransaction.amount,\n      Description: apiTransaction.status_description,\n      status: apiTransaction.status_description === 'Transaction successful' ? 'Successful' : apiTransaction.status_description === 'Transaction pending' ? 'Pending' : 'Failed',\n      CurrentBalance: apiTransaction.current_bal,\n      TransactionType: 'Transfer',\n      // You can update this based on your actual data\n      date: apiTransaction.created_at\n    }));\n    return mappedTransactions;\n  } catch (error) {\n    console.error('Error fetching data:', error);\n    return [];\n  }\n};\nexport const AgentPerformanceData = async (agentId, businessName) => {\n  try {\n    const params = {\n      agent_id: agentId\n    };\n    if (businessName) {\n      params.business_name = businessName;\n    }\n    const response = await axios.get('/searchAg', {\n      params: params\n    });\n    const data = response.data;\n\n    // Map the API response to the desired format\n    const agentPerformanceData = data.agent_info.map((info, index) => ({\n      id: index + 1,\n      agentCode: info.agent_code,\n      businessName: info.business_name,\n      cashCount: data.CashCount[index],\n      transferCount: data['Transfer count'][index],\n      totalCount: data.TotalCount[index],\n      cashVolume: parseFloat(data.Cashvolume[index]),\n      transferVolume: parseFloat(data.Transfervolume[index]),\n      totalAmount: parseFloat(data.Totalamount[index])\n    }));\n    return agentPerformanceData;\n  } catch (error) {\n    console.error('Error fetching agent performance data:', error);\n    return [];\n  }\n};","map":{"version":3,"names":["axios","TransactionData","period","agentId","response","get","params","data","status","error","console","fetchTransactionsData","transactionsFromAPI","transaction","mappedTransactions","map","apiTransaction","index","id","PreviousBalance","previous_bal","Amount","amount","Description","status_description","CurrentBalance","current_bal","TransactionType","date","created_at","AgentTransactionData","searchValue","agent_id","business_name","agentTransactionData","agent","agentCode","agent_code","name","first_name","last_name","businessName","phoneNumber","business_phone","address","business_address","localGovt","lga","state","SingleAgentTransactionData","AgentPerformanceData","agentPerformanceData","agent_info","info","cashCount","CashCount","transferCount","totalCount","TotalCount","cashVolume","parseFloat","Cashvolume","transferVolume","Transfervolume","totalAmount","Totalamount"],"sources":["C:/Users/USER/Documents/flexiMoney-web-app/src/features/dashboard/data/transactionData.jsx"],"sourcesContent":["import axios from \"../../../utils/axiosInstance\";\r\n\r\nexport const TransactionData = async (period, agentId) => {\r\n  try {\r\n    const response = await axios.get(`/alltranx`, {\r\n      params: {\r\n        'agent_id': agentId,\r\n        'period': period\r\n      },\r\n    });\r\n    const data = response.data;\r\n    return data.status === 'Successful' ? data.data : [];\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const fetchTransactionsData = async (agentId) => {\r\n  try {\r\n    const response = await axios.get('/aggregtorwallet', {\r\n      params: {\r\n        'agent_id': agentId,\r\n      },\r\n    });\r\n\r\n    const data = response.data;\r\n    const transactionsFromAPI = data.data.transaction.data;\r\n\r\n    // Map the API transactions to the format you want\r\n    const mappedTransactions = transactionsFromAPI.map((apiTransaction, index) => ({\r\n      id: index + 1,\r\n      PreviousBalance: apiTransaction.previous_bal,\r\n      Amount: apiTransaction.amount,\r\n      Description: apiTransaction.status_description,\r\n      status:\r\n        apiTransaction.status_description === 'Transaction successful'\r\n          ? 'Successful'\r\n          : apiTransaction.status_description === 'Transaction pending'\r\n          ? 'Pending'\r\n          : 'Failed',\r\n      CurrentBalance: apiTransaction.current_bal,\r\n      TransactionType: 'Transfer', // You can update this based on your actual data\r\n      date: apiTransaction.created_at,\r\n    }));\r\n\r\n    return mappedTransactions;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const AgentTransactionData = async (agentId, searchValue) => {\r\n  try {\r\n    if (!agentId) {\r\n      console.error('Agent ID is required.');\r\n      return [];\r\n    }\r\n\r\n    const response = await axios.get('/searchAgtByAggregator', {\r\n      params: {\r\n        agent_id: agentId,\r\n        business_name: searchValue, // Add the business_name parameter\r\n      },\r\n    });\r\n\r\n    const data = response.data;\r\n\r\n    // Map the API response to the desired format\r\n    const agentTransactionData = data.data.map(agent => ({\r\n      id: agent.id,\r\n      agentCode: agent.agent_code,\r\n      name: `${agent.first_name} ${agent.last_name}`,\r\n      businessName: agent.business_name || '',\r\n      phoneNumber: agent.business_phone || '',\r\n      address: agent.business_address || '',\r\n      localGovt: agent.lga || '',\r\n      state: agent.state || ''\r\n    }));\r\n\r\n    return agentTransactionData;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const SingleAgentTransactionData = async (agentId) => {\r\n  try {\r\n    const response = await axios.get('/aggregtorwallet', {\r\n      params: {\r\n        'agent_id': agentId,\r\n      },\r\n    });\r\n\r\n    const data = response.data;\r\n    const transactionsFromAPI = data.data.transaction.data;\r\n\r\n    // Map the API transactions to the format you want\r\n    const mappedTransactions = transactionsFromAPI.map((apiTransaction, index) => ({\r\n      id: index + 1,\r\n      PreviousBalance: apiTransaction.previous_bal,\r\n      Amount: apiTransaction.amount,\r\n      Description: apiTransaction.status_description,\r\n      status:\r\n        apiTransaction.status_description === 'Transaction successful'\r\n          ? 'Successful'\r\n          : apiTransaction.status_description === 'Transaction pending'\r\n          ? 'Pending'\r\n          : 'Failed',\r\n      CurrentBalance: apiTransaction.current_bal,\r\n      TransactionType: 'Transfer', // You can update this based on your actual data\r\n      date: apiTransaction.created_at,\r\n    }));\r\n\r\n    return mappedTransactions;\r\n  } catch (error) {\r\n    console.error('Error fetching data:', error);\r\n    return [];\r\n  }\r\n};\r\n\r\nexport const AgentPerformanceData = async (agentId, businessName) => {\r\n  try {\r\n    const params = { agent_id: agentId };\r\n    if (businessName) {\r\n      params.business_name = businessName;\r\n    }\r\n\r\n    const response = await axios.get('/searchAg', {\r\n      params: params,\r\n    });\r\n\r\n    const data = response.data;\r\n\r\n    // Map the API response to the desired format\r\n    const agentPerformanceData = data.agent_info.map((info, index) => ({\r\n      id: index + 1,\r\n      agentCode: info.agent_code,\r\n      businessName: info.business_name,\r\n      cashCount: data.CashCount[index],\r\n      transferCount: data['Transfer count'][index],\r\n      totalCount: data.TotalCount[index],\r\n      cashVolume: parseFloat(data.Cashvolume[index]),\r\n      transferVolume: parseFloat(data.Transfervolume[index]),\r\n      totalAmount: parseFloat(data.Totalamount[index]),\r\n    }));\r\n\r\n    return agentPerformanceData;\r\n  } catch (error) {\r\n    console.error('Error fetching agent performance data:', error);\r\n    return [];\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}